* Samsung Exynos5250 Clock Controller

The Exynos5250 clock controller generates and supplies clock to various
controllers within the Exynos5250 SoC.

Required Properties:

- compatible: should be one of the following.
  - "samsung,exynos5250-clock" - controller compatible with Exynos5250 SoC.

- reg: physical base address of the controller and length of memory mapped
  region.

- #clock-cells: should be 1.

- samsung,armclk-divider-table: when the frequency of the APLL is changed
  the divider clocks in CMU_CPU clock domain also need to be updated. These
  divider clocks have SoC specific divider clock output requirements for a
  specific APLL clock speeds. When APLL clock rate is changed, these divider
  clocks are reprogrammed with pre-determined values in order to maintain the
  SoC specific divider clock outputs. This property lists the divider values
  for divider clocks in the CMU_CPU block for supported APLL clock speeds.
  The format of each entry included in the arm-frequency-table should be
  as defined below

      cell #1: expected arm clock parent frequency
      cell #2 ~ cell #9: value of clock divider in the following order
	       cpud_ratio, acp_ratio, periph_ratio, atb_ratio,
               pclk_dbg_ratio, apll_ratio, copy_ratio, hpm_ratio

- samsung,armclk-cells: defines the number of cells in
  samsung,armclk-divider-table property. The value of this property should be 9.

Each clock is assigned an identifier and client nodes can use this identifier
to specify the clock which they consume.

All available clocks are defined as preprocessor macros in
dt-bindings/clock/exynos5250.h header and can be used in device
tree sources.

Example 1: An example of a clock controller node is listed below.

	clock: clock-controller@0x10010000 {
		compatible = "samsung,exynos5250-clock";
		reg = <0x10010000 0x30000>;
		#clock-cells = <1>;

		samsung,armclk-cells = <9>;
		samsung,armclk-divider-table = <1700000 3 7 7 7 3 5 0 2>,
					       <1600000 3 7 7 7 1 4 0 2>,
					       <1500000 2 7 7 7 1 4 0 2>,
					       <1400000 2 7 7 6 1 4 0 2>,
					       <1300000 2 7 7 6 1 3 0 2>,
					       <1200000 2 7 7 5 1 3 0 2>,
					       <1100000 3 7 7 5 1 3 0 2>,
					       <1000000 1 7 7 4 1 2 0 2>,
					       < 900000 1 7 7 4 1 2 0 2>,
					       < 800000 1 7 7 4 1 2 0 2>,
					       < 700000 1 7 7 3 1 1 0 2>,
					       < 600000 1 7 7 3 1 1 0 2>,
					       < 500000 1 7 7 2 1 1 0 2>,
					       < 400000 1 7 7 2 1 1 0 2>,
					       < 300000 1 7 7 1 1 1 0 2>,
					       < 200000 1 7 7 1 1 1 0 2>;
	};

Example 2: UART controller node that consumes the clock generated by the clock
	   controller. Refer to the standard clock bindings for information
	   about 'clocks' and 'clock-names' property.

	serial@13820000 {
		compatible = "samsung,exynos4210-uart";
		reg = <0x13820000 0x100>;
		interrupts = <0 54 0>;
		clocks = <&clock CLK_UART2>, <&clock CLK_SCLK_UART2>;
		clock-names = "uart", "clk_uart_baud0";
	};
